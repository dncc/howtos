INVERSE REGEXP
-----------------------------------------------------------------------
inverse matching can be mimiced by using negative look-arounds:

	 	   ^((?!hede).)*$

The regex above will match any string, or line without a line break,
not containing the (sub) string 'hede'. As mentioned, this is not
something regex is "good" at (or should do), but still, it is possible.

Explanation

A string is just a list of n characters. Before, and after each character,
there's an empty string. So a list of n characters will have n+1 empty
strings. Consider the string "ABhedeCD":

    +--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+
S = |e1| A |e2| B |e3| h |e4| e |e5| d |e6| e |e7| C |e8| D |e9|
    +--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+---+--+

index    0      1      2      3      4      5      6      7

where the e's are the empty strings. The regex (?!hede). looks ahead to see
if there's no substring "hede" to be seen, and if that is the case (so something
else is seen), then the . (dot) will match any character except a line break.
Look-arounds are also called zero-width-assertions because they don't consume any
characters. They only assert/validate something.

So, in my example, every empty string is first validated to see if there's no
"hede" up ahead, before a character is consumed by the . (dot). The regex (?!hede).
will do that only once, so it is wrapped in a group, and repeated zero or more
times: ((?!hede).)*. Finally, the start- and end-of-input are anchored to make sure
the entire input is consumed: ^((?!hede).)*$

As you can see, the input "ABhedeCD" will fail because on e3, the regex (?!hede)
fails (there is "hede" up ahead!).
----------------------------------------------------------------------------------

