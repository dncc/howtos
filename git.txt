----------------------------------------------------------------------
# RESOLVING CONFLICTS
-----------------------------------------------------------------------
# create a new branch "about" and switch to it
git checkout -b about master

# create a second branch called "about2", but donâ€™t switch to it:
git branch about2 about

# Before you switch, add another language to your about.html file,
# and commit your change:
git commit -m "add Javascript to list" -a
#Switch over to about2.
git checkout about2

# Add another name to about.html on the same line where you added
# your last entry, but this time make it something different.
git commit -m "add EMCAScript to list" -a

# Switch back to about, and then try merging about2 into it:
git checkout about
git merge about2

# conflict should occur so start:
git mergetool

#Merging the files: about.html
#Normal merge conflict for 'about.html':
#{local}: modified
#{remote}: modified
#Hit return to start merge resolution tool (opendiff):
-------------------------------------------------------
BACKUP
-------------------------------------------------------
git init --bare share #on usb or backup drive
cd <origin>
git remote add backup /path/to/the/backup/dir
git push backup master
-------------------------------------------------------
RETRIEVING BACKUP
-------------------------------------------------------
git pull backup master
-------------------------------------------------------

-------------------------------------------------------
SEE RECENT HISTORY
-------------------------------------------------------
gitk <filename>
git log -p <filename>
git log --graph --pretty=oneline --abbrev-commit --decorate #short log output
git log --follow -p <filename>
git whatchanged -p <filename>

-------------------------------------------------------
UNDO COMMIT
-------------------------------------------------------
#the safest way is to rebase interactivelly
git rebase -i HEAD^^
#non reversible, will delete current commit and all changes in working tree
#and it will set current commit to the parrent of the deleted one
git reset --hard HEAD^
#also we can revert commit but it will add more commit messages to the history
git revert HEAD~3 #(HEAD~3 is the same as HEAD^^^)

VIEW DIFFS OF SAME FILE IN DIFFERENT COMMITS
-------------------------------------------------------
git diff HEAD:Git.txt HEAD^:Git.txt

UNDO COMMIT
-------------------------------------------------------
$ git commit -a
$ git revert 1b6d
#will undo just the commit with the given hash. The revert is recorded as a new commit, which you can confirm by running git log.

CHECKOUT by referencing commit with message
--------------------------------------------------------
$ git checkout :/"My first b"
#to jump to the commit that starts with a given message. You can also ask for the 5th-last saved state:
$ git checkout master~5

WHAT HAVE I DONE?
--------------------------------------------------------
    $ git diff "@{yesterday}"

Or between a particular version and 2 versions ago:
    $ git diff 1b6d "master~2"

In each case the output is a patch that can be applied with
git apply. Try also:
    $ git whatchanged --since="2 weeks ago"

Let A, B, C, D be four successive commits where B is the same
as A except some files have been removed. We want to add the
files back at D. How can we do this? There are at least three
solutions. Assuming we are at D: The difference between A and B
are the removed files. We can create a patch representing this
difference and apply it:
    $ git diff B A | git apply

Since we saved the files back at A, we can retrieve them:
    $ git checkout A foo.c bar.h

We can view going from A to B as a change we want to undo:
    $ git revert B

Pull, clone git and linux
    $ git pull/clone http://github.com/torvalds/linux.git #Linux
    $ git pull/clone http://github.com/gitster/git.git #Git

Diff's between staged and commited
    $ git diff --staged
--------------------------------------------------------
FORK GITHUB
--------------------------------------------------------
1. Fork the project wia github web UI or command line

2. Clone it:
   $ git clone git@github.com:dncc/project.git

3. The clone has a default remote called origin that points to my fork on GitHub.
   To keep track of the original repo, you need to add another remote named upstream:

   $ git remote add upstream git://github.com/octocat/project.git
   $ git fetch upstream
   $ git merge upstream/master # fetch & merge can be replaced
                               # with '$git pull upstream master'
   $ git push                  # this will push changes to the
                               # fork repo on the github

--------------------------------------------------------
CLONE ALL REMOTE BRANCHES
--------------------------------------------------------
This is related to FORK GITHUB, and it is done usually
after it. Look at the local branches in your repository:

$ git branch
* master

But there are other branches hiding in your repository!
You can see these using the -a flag:

$ git branch -a
* master
  origin/HEAD
  origin/master
  origin/v1.0-stable
  origin/experimental

You just want to take a quick peek at an origin branch?
Check it out directly:

$ git checkout origin/experimental

But if you want to work on that branch,
you'll need to create a local tracking branch:

$ git checkout -b experimental origin/experimental

Now, if you look at your local branches:

$ git branch
  master
* experimental

----------------------------------------------------------------------------------------------------
SANBOXING STRATEGY
----------------------------------------------------------------------------------------------------
       $ git checkout master
Update master branch from the origin (last commit: a7578e95cbdbb47e)
       $ git fetch upstream
       $ git merge upstream/master
Play/work in sanbox
       $ git checkout sanbox # (local sanbox branch)
Work here and commit all changes
Than rebase commited changes to the new updates from the origin
       $ git commit -a -m "some changes"
       $ git rebase a7578e95cbdbb47e
----------------------------------------------------------------------------------------------------
Push to remote repository
     $ git remote add origin git@github.com:dcvetino/wmiirc.git
     $ git push -u origin master

-----------------------------------------------
CHERRY-PICKING (MERGING ONLY SPECIFIC COMMITS
FROM DIFFERENT BRANCH INTO THE CURRENT BRANCH)
-----------------------------------------------
Apply the changes introduced by all commits that are ancestors of
master but not of HEAD to produce new commits.
      $ git cherry-pick ^HEAD master
Apply the changes introduced by the fifth and third last commits
pointed to by master and create 2 new commits with these changes.
      $ git cherry-pick master~4 master~2
Apply the change introduced by the commit at the tip of the master
branch and create a new commit with this change.
      $ git cherry-pick master
-----------------------------------------------



